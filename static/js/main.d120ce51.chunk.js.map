{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","аttachmentTemplate","attachment","item","title","imageUrl","images","url","subtitle","actions","buttons","onActionExecute","addNewMessage","parseActions","undefined","map","action","type","parseText","event","value","message","text","onResponse","activity","newMessage","that","result","fulfillment","messages","forEach","element","speech","author","bot","timestamp","Date","suggestedActions","replies","x","setState","prevState","data","console","log","null","attachments","client","textRequest","toString","then","user","state","ApiAiClient","accessToken","eventRequest","id","name","bind","style","height","display","width","this","onMessageSend","attachmentTemplate","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d120ce51.chunk.js","sourcesContent":["import React from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { Calendar } from '@progress/kendo-react-dateinputs';\nimport { ApiAiClient } from 'api-ai-javascript';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { messages: [] };\n        this.client = new ApiAiClient({\n            accessToken: '5188e935cea54fd4b2079aa176f48ecd'\n        });\n        this.client.eventRequest(\"Welcome\").then(this.onResponse, this);\n        this.user = {\n            id: 1\n        };\n        this.bot = {\n            id: \"Info Buddy\",\n            name: 'Covid19 Info Bot'\n        };\n        this.addNewMessage = this.addNewMessage.bind(this);\n    }\n\n    аttachmentTemplate = (props) => {\n        let attachment = props.item;\n        return <HeroCard title={attachment.title}\n                imageUrl={attachment.images ? attachment.images[0].url : \"\"}\n                subtitle={attachment.subtitle ? attachment.subtitle : \"\" }\n                actions={attachment.buttons}\n                onActionExecute={this.addNewMessage}/>;\n    }\n\n    parseActions = (actions) => {\n        if (actions !== undefined ) {\n            actions.map(action => {\n                if (action.type === \"postBack\") {\n                    action.type = 'reply';\n                }\n            });\n            return actions;\n        }\n        return [];\n    }\n\n    parseText = ( event ) => {\n        if (event.action !== undefined) {\n            return event.action.value;\n        } else if ( event.value ) {\n            return event.value;\n        } else {\n            return event.message.text;\n        }\n    }\n\n    onResponse = (activity) => {\n        let that = this;\n        activity.result.fulfillment.messages.forEach(function(element) {\n            let newMessage;\n            newMessage = {\n                text: element.speech,\n                author: that.bot,\n                timestamp: new Date(activity.timestamp),\n                suggestedActions: element.replies ? element.replies.map(x => { return { type: \"reply\", title: x, value: x };}) : []\n            };\n            that.setState((prevState) => {\n                return { messages: [ ...prevState.messages, newMessage ] };\n            });\n        });\n\n        if (activity.result.fulfillment.data) {\n          console.log(activity.result.fulfillment.data)\n            let newMessage;\n            newMessage = {\n                text: \"\",\n                author: that.bot,\n                timestamp: new Date(activity.timestamp),\n                suggestedActions: activity.result.fulfillment.data.suggestedActions ? this.parseActions(activity.result.fulfillment.data.null.suggestedActions) : [],\n                attachments: activity.result.fulfillment.data.attachments ? activity.result.fulfillment.data.null.attachments : []\n\n            };\n            that.setState((prevState) => {\n                return { messages: [ ...prevState.messages, newMessage ] };\n            });\n        }\n    }\n\n    addNewMessage = (event) => {\n        let value = this.parseText(event);\n        this.client.textRequest(value.toString()).then(this.onResponse, this);\n        if (!event.value) {\n            this.setState((prevState) => {\n                return { messages: [ ...prevState.messages, { author: this.user, text: value, timestamp: new Date() } ] };\n            });\n        }\n    };\n\n    render() {\n        return (\n          <div \n          style={{height:\"100vh\",display:\"flex\"}}>\n            <Chat\n                width=\"100%\"\n                messages={this.state.messages}\n                user={this.user}\n                onMessageSend={this.addNewMessage}\n                attachmentTemplate={this.аttachmentTemplate}\n            />\n          </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import {Provider} from 'react-redux';\n// import {store} from './Chat';\n// import 'milligram';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}