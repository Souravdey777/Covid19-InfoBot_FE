{"version":3,"sources":["boticon.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","аttachmentTemplate","attachment","item","title","imageUrl","images","url","subtitle","actions","buttons","onActionExecute","addNewMessage","parseActions","undefined","map","action","type","parseText","event","value","message","text","onResponse","activity","newMessage","that","result","fulfillment","messages","forEach","element","speech","author","bot","timestamp","Date","suggestedActions","replies","x","setState","prevState","data","console","log","getTimeFromDate","null","attachments","client","textRequest","toString","then","user","state","ApiAiClient","accessToken","eventRequest","id","name","avatarUrl","botIcon","bind","num","slice","date","hours","getHours","minutes","getMinutes","this","pad","style","height","display","flexDirection","justifyContent","alignItems","className","src","alt","href","width","onMessageSend","attachmentTemplate","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a714715f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boticon.ae06ca3f.gif\";","import React from 'react';\nimport { Chat, HeroCard } from '@progress/kendo-react-conversational-ui';\nimport { ApiAiClient } from 'api-ai-javascript';\nimport \"./App.css\";\nimport botIcon from \"./boticon.gif\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { messages: [] };\n    this.client = new ApiAiClient({\n      accessToken: '5188e935cea54fd4b2079aa176f48ecd'\n    });\n    this.client.eventRequest(\"Welcome\").then(this.onResponse, this);\n    this.user = {\n      id: 1\n    };\n    this.bot = {\n      id: \"Info Buddy\",\n      name: 'Covid19 Info Bot',\n      avatarUrl: botIcon\n    };\n    this.addNewMessage = this.addNewMessage.bind(this);\n  }\n\n  аttachmentTemplate = (props) => {\n    let attachment = props.item;\n    return <HeroCard title={attachment.title}\n      imageUrl={attachment.images ? attachment.images[0].url : \"\"}\n      subtitle={attachment.subtitle ? attachment.subtitle : \"\"}\n      actions={attachment.buttons}\n      onActionExecute={this.addNewMessage} />;\n  }\n\n  parseActions = (actions) => {\n    if (actions !== undefined) {\n      actions.map(action => {\n        if (action.type === \"postBack\") {\n          action.type = 'reply';\n        }\n      });\n      return actions;\n    }\n    return [];\n  }\n\n  parseText = (event) => {\n    if (event.action !== undefined) {\n      return event.action.value;\n    } else if (event.value) {\n      return event.value;\n    } else {\n      return event.message.text;\n    }\n  }\n\n  onResponse = (activity) => {\n    let that = this;\n    activity.result.fulfillment.messages.forEach(function (element) {\n      let newMessage;\n      newMessage = {\n        text: element.speech,\n        author: that.bot,\n        timestamp: new Date(activity.timestamp),\n        suggestedActions: element.replies ? element.replies.map(x => { return { type: \"reply\", title: x, value: x }; }) : []\n      };\n      that.setState((prevState) => {\n        return { messages: [...prevState.messages, newMessage] };\n      });\n    });\n\n    if (activity.result.fulfillment.data) {\n      console.log(this.getTimeFromDate(activity.timestamp))\n      let newMessage;\n      newMessage = {\n        text: \"\",\n        author: that.bot,\n        timestamp: new Date(activity.timestamp),\n        suggestedActions: activity.result.fulfillment.data.suggestedActions ? this.parseActions(activity.result.fulfillment.data.null.suggestedActions) : [],\n        attachments: activity.result.fulfillment.data.attachments ? activity.result.fulfillment.data.null.attachments : []\n\n      };\n      that.setState((prevState) => {\n        return { messages: [...prevState.messages, newMessage] };\n      });\n    }\n  }\n\n  addNewMessage = (event) => {\n    let value = this.parseText(event);\n    this.client.textRequest(value.toString()).then(this.onResponse, this);\n    if (!event.value) {\n      this.setState((prevState) => {\n        return { messages: [...prevState.messages, { author: this.user, text: value, timestamp: new Date() }] };\n      });\n    }\n  };\n  \n  pad(num) { \n    return (\"0\"+num).slice(-2);\n  }\n  \n  getTimeFromDate(timestamp) {\n    var date = new Date(timestamp);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    return this.pad(hours>12?(hours-12):hours)+\":\"+this.pad(minutes)+\" \"+(hours>12?\"pm\":\"am\")\n  }\n\n  render() {\n    return (\n      <div\n        style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems:\"center\" }}>\n        <div className=\"header\">\n          <img src={botIcon} alt=\"bot\" className=\"botimage\"/>\n          <div className=\"headerBody\">\n            <div className=\"title\">COVID-19 INFO BOT</div>\n            <div className=\"description1\">This is chat bot capable of providing live data of COVID-19 cases for all Indian states and general info regarding COVID19 </div>\n            <div className=\"description\" >Repo Url: <a href=\"https://github.com/Souravdey777/Covid19-InfoBot_FE\">Github</a></div>\n            <div className=\"description\" >Developed by: <a href=\"https://souravdey777.github.io/Portfolio/\">Sourav Dey</a></div>\n          </div>\n          </div>\n        <Chat\n          width=\"100%\"\n          messages={this.state.messages}\n          user={this.user}\n          onMessageSend={this.addNewMessage}\n          attachmentTemplate={this.аttachmentTemplate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import {Provider} from 'react-redux';\n// import {store} from './Chat';\n// import 'milligram';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}